using System.Text.RegularExpressions;
using Wolder.Core.Assistants;
using Wolder.Core.Files;
using Wolder.CSharp.Compilation;
using Microsoft.Extensions.Logging;
using Wolder.Core.Workspace;

namespace Wolder.CSharp.OpenAI.Actions;

public record GenerateRazorComponentParameters(
    DotNetProjectReference project,
    string classFullName,
    string behaviorPrompt)
{
    public IEnumerable<FileMemoryItem> ContextMemoryItems { get; set; } = 
        Enumerable.Empty<FileMemoryItem>();
}

public class GenerateBlazorComponent(
    IAIAssistant assistant,
    ILogger<GenerateRazorComponentParameters> logger,
    DotNetProjectFactory projectFactory,
    CSharpActions csharp,
    ISourceFiles sourceFiles,
    GenerateRazorComponentParameters parameters) 
    : IAction<GenerateRazorComponentParameters, FileMemoryItem>
{
    private const string BlazorAssistantPrompt = 
        "You are a C# Blazor component/page generator. Your output will be directly " +
        "written to a `.razor` file. Write terse but helpful comments to explain the code and its structure. " +
        "Add any usings for items used from the context. Ensure all comments use razor style comments @* comment *@. " +
        "It is crucial that the `@rendermode InteractiveServer` directive is included at the top of an interactive component/page " +
        "so that it works correctly in an interactive server scenario.";
    
    public async Task<FileMemoryItem> InvokeAsync()
    {
        var (project, className, behaviorPrompt) = parameters;
        var tree = sourceFiles.GetDirectoryTree();
        var context = $$"""
            Directory tree of current project:
            {{tree}}
            """;
        if (parameters.ContextMemoryItems.Any())
        {
            context = "\nUsing the following for context:\n" + 
                string.Join("\n", parameters.ContextMemoryItems
                    .Select(i => $"File: {i.RelativePath}\n{i.Content}" ));
        }
        var response = await assistant.CompletePromptAsync($"""
            {BlazorAssistantPrompt}
            
            {context}
            
            Create a Blazor component for the file `{className}.razor` that adheres to the behavior described here:
            {behaviorPrompt}  
            """);
        var sanitized = Sanitize(response);

        logger.LogInformation(sanitized);

        var path = Path.Combine(project.RelativeRoot, $"{className}.razor");

        await sourceFiles.WriteFileAsync(path, sanitized);

        var result = await csharp.CompileProjectAsync(
            new(project));
        
        if (result is CompilationResult.Failure failure)
        {
            var resolutionResult = await TryResolveFailedCompilationAsync(project, sanitized, failure, context);
            if (resolutionResult is CompilationResult.Failure)
            {
                throw new("Resolution failed");
            }
        }

        return new FileMemoryItem(path, sanitized);
    }

    private async Task<CompilationResult> TryResolveFailedCompilationAsync(
        DotNetProjectReference project, string fileContent, CompilationResult lastResult, string context)
    {
        var (projectRef, className, behaviorPrompt) = parameters;
        var maxAttempts = 2;
        for (int i = 0; i < maxAttempts; i++)
        {
            var messagesText = lastResult.Output.Errors;
            var response = await assistant.CompletePromptAsync($"""
                {BlazorAssistantPrompt}
                {context}

                The file `{className}.razor` was just generated by an automated assistant using this prompt:
                {behaviorPrompt} 
                
                ```
                {fileContent}
                ```
                
                This file caused these compilation errors. 
                {messagesText}
                
                Create a new version of the file that resolves the errors.
                """);
            
            var sanitized = Sanitize(response);
            logger.LogInformation(sanitized);
            var path = Path.Combine(projectRef.RelativeRoot, $"{className}.razor");
            await sourceFiles.WriteFileAsync(path, sanitized);
            
            lastResult = await csharp.CompileProjectAsync(new(project));
            if (lastResult is CompilationResult.Success)
            {
                break;
            }
        }
        return lastResult;
    }
    
    private static string Sanitize(string input)
    {
        string pattern = @"^\s*```\s*razor|^\s*```\s*csharp|^\s*```|^\s*```\s*html";
        string result = Regex.Replace(input, pattern, "", RegexOptions.Multiline);

        return result;
    }
}