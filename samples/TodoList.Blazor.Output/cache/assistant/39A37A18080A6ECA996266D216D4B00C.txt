```csharp
=== START FILE: TodoList.Blazor/Services/TodoItem.cs
namespace TodoList.Blazor.Services
{
    public class TodoItem
    {
        public string Description { get; set; }
        public bool IsCompleted { get; set; }
    }
}
=== END FILE: TodoList.Blazor/Services/TodoItem.cs

=== START FILE: TodoList.Blazor/Services/TodoListService.cs
using System;
using System.Collections.Generic;
using System.Linq;

namespace TodoList.Blazor.Services
{
    public class TodoListService
    {
        private List<TodoItem> todoItems = new List<TodoItem>();

        public List<TodoItem> GetTodoItems()
        {
            return todoItems;
        }

        public void AddTodoItem(TodoItem todoItem)
        {
            todoItems.Add(todoItem);
        }

        public void RemoveTodoItem(string description)
        {
            var itemToRemove = todoItems.FirstOrDefault(item => item.Description == description);
            if (itemToRemove != null)
            {
                todoItems.Remove(itemToRemove);
            }
        }
    }
}
=== END FILE: TodoList.Blazor/Services/TodoListService.cs

=== START FILE: TodoList.Blazor/Pages/Index.razor
@page "/"

<h1>Todo List</h1>

@foreach (var todoItem in todoListService.GetTodoItems())
{
    <div>
        <input type="checkbox" checked="@todoItem.IsCompleted" />
        <span>@todoItem.Description</span>
    </div>
}

@code {
    private TodoListService todoListService;

    protected override void OnInitialized()
    {
        todoListService = new TodoListService();
        todoListService.AddTodoItem(new TodoItem { Description = "Sample todo item", IsCompleted = false });
        todoListService.AddTodoItem(new TodoItem { Description = "Another todo item", IsCompleted = true });
    }
}
=== END FILE: TodoList.Blazor/Pages/Index.razor
```